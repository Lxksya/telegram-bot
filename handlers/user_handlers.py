from telegram import Update
from telegram.ext import (
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    ConversationHandler
)
from services.movie_service import load_movies
from services.booking_service import (
    get_user_bookings,
    cancel_booking,
    load_bookings,
    save_bookings
)
from utils.keyboard_builder import build_keyboard

# –°–æ—Å—Ç–æ—è–Ω–∏—è ConversationHandler
MAIN_MENU, MOVIE_CHOICE, SESSION_CHOICE, SEAT_CHOICE, BOOKING_CANCELLATION = range(5)


def register_user_handlers(app):
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            MAIN_MENU: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_main_menu)
            ],
            MOVIE_CHOICE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_movie_choice)
            ],
            SESSION_CHOICE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_session_choice)
            ],
            SEAT_CHOICE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_seat_choice)
            ],
            BOOKING_CANCELLATION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_booking_cancellation)
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel_operation)],
        allow_reentry=True
    )

    app.add_handler(conv_handler)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await show_main_menu(update)


async def show_main_menu(update: Update):
    user_id = str(update.effective_user.id)
    bookings = get_user_bookings(user_id)

    if bookings:
        buttons = ["üé¨ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –±–∏–ª–µ—Ç", "üìã –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å"]
    else:
        buttons = ["üé¨ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –±–∏–ª–µ—Ç"]

    await update.message.reply_text(
        "üé≠ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=build_keyboard(buttons)
    )

    return MAIN_MENU


async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text

    if choice == "üé¨ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –±–∏–ª–µ—Ç":
        return await start_booking(update)
    elif choice == "üìã –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è":
        return await show_user_bookings(update)
    elif choice == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å":
        return await start_booking_cancellation(update, context)
    else:
        await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
        return await show_main_menu(update)


async def start_booking(update: Update):
    movies = load_movies()

    if not movies:
        await update.message.reply_text("üé• –°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤.")
        return await show_main_menu(update)

    await show_movies(update)
    return MOVIE_CHOICE


async def show_movies(update: Update):
    movies = load_movies()
    await update.message.reply_text(
        "üé¨ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å–º:",
        reply_markup=build_keyboard([m['title'] for m in movies] + ['üö™ –ù–∞–∑–∞–¥'])
    )


async def show_user_bookings(update: Update):
    user_id = str(update.effective_user.id)
    bookings = get_user_bookings(user_id)

    if not bookings:
        await update.message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.")
        return await show_main_menu(update)

    message = ["üìã –í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:"]
    for booking in bookings:
        message.append(
            f"\nüé¨ {booking['movie']}\n"
            f"‚è∞ {booking.get('session', '–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üí∫ –ú–µ—Å—Ç–æ: {booking['seat']}"
        )

    await update.message.reply_text("\n".join(message))
    return await show_main_menu(update)


async def handle_movie_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text

    if choice == 'üö™ –ù–∞–∑–∞–¥':
        return await show_main_menu(update)

    movies = load_movies()
    selected_movie = next((m for m in movies if m['title'] == choice), None)

    if not selected_movie:
        await update.message.reply_text("‚ùå –§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return await show_movies(update)

    if not selected_movie.get('sessions'):
        await update.message.reply_text("‚è∞ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ–∞–Ω—Å–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∏–ª—å–º–∞")
        return await show_movies(update)

    context.user_data['selected_movie'] = selected_movie
    await show_sessions(update, selected_movie)
    return SESSION_CHOICE


async def show_sessions(update: Update, movie: dict):
    sessions = [f"{s['date']} {s['time']}" for s in movie['sessions']]
    await update.message.reply_text(
        f"‚è∞ –°–µ–∞–Ω—Å—ã –¥–ª—è {movie['title']}:",
        reply_markup=build_keyboard(sessions + ['‚Ü©Ô∏è –ù–∞–∑–∞–¥'])
    )


async def handle_session_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text

    if choice == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
        await show_movies(update)
        return MOVIE_CHOICE

    movie = context.user_data['selected_movie']
    session = next((s for s in movie['sessions'] if f"{s['date']} {s['time']}" == choice), None)

    if not session:
        await update.message.reply_text("‚ùå –°–µ–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return await show_sessions(update, movie)

    context.user_data['selected_session'] = session
    await show_seats(update)
    return SEAT_CHOICE


async def show_seats(update: Update):
    await update.message.reply_text(
        "üí∫ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ (1-20):",
        reply_markup=build_keyboard([str(i) for i in range(1, 21)] + ['‚Ü©Ô∏è –ù–∞–∑–∞–¥'])
    )


async def handle_seat_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text

    if choice == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
        await show_sessions(update, context.user_data['selected_movie'])
        return SESSION_CHOICE

    if not choice.isdigit() or not 1 <= int(choice) <= 20:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 20")
        return await show_seats(update)

    booking = {
        'user_id': str(update.effective_user.id),
        'movie': context.user_data['selected_movie']['title'],
        'session': f"{context.user_data['selected_session']['date']} {context.user_data['selected_session']['time']}",
        'seat': choice
    }

    bookings = load_bookings()
    bookings.append(booking)
    save_bookings(bookings)

    await update.message.reply_text(
        f"‚úÖ –ë—Ä–æ–Ω—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
        f"üé¨ –§–∏–ª—å–º: {booking['movie']}\n"
        f"‚è∞ –í—Ä–µ–º—è: {booking['session']}\n"
        f"üí∫ –ú–µ—Å—Ç–æ: {booking['seat']}"
    )

    return await show_main_menu(update)


async def start_booking_cancellation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    bookings = get_user_bookings(user_id)

    if not bookings:
        await update.message.reply_text("‚ÑπÔ∏è –ù–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return await show_main_menu(update)

    choices = []
    for i, booking in enumerate(bookings, 1):
        choices.append(f"{i}. {booking['movie']} (–º–µ—Å—Ç–æ {booking['seat']})")

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–æ–Ω—å –¥–ª—è –æ—Ç–º–µ–Ω—ã:",
        reply_markup=build_keyboard(choices + ["–û—Ç–º–µ–Ω–∞"])
    )

    context.user_data['user_bookings'] = bookings
    return BOOKING_CANCELLATION


async def handle_booking_cancellation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text

    if choice == "–û—Ç–º–µ–Ω–∞":
        await update.message.reply_text("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return await show_main_menu(update)

    bookings = context.user_data.get('user_bookings', [])

    try:
        num = int(choice.split('.')[0]) - 1
        if num < 0 or num >= len(bookings):
            raise ValueError
    except:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return BOOKING_CANCELLATION

    booking_to_cancel = bookings[num]
    bookings = [b for b in load_bookings() if not (
            b.get('user_id') == str(update.effective_user.id) and
            b['movie'] == booking_to_cancel['movie'] and
            b['session'] == booking_to_cancel['session'] and
            b['seat'] == booking_to_cancel['seat']
    )]

    if save_bookings(bookings):
        await update.message.reply_text(f"‚úÖ –ë—Ä–æ–Ω—å –Ω–∞ {booking_to_cancel['movie']} –æ—Ç–º–µ–Ω–µ–Ω–∞!")
    else:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å.")

    return await show_main_menu(update)


async def cancel_operation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    return await show_main_menu(update)
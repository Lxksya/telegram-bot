from telegram import Update
from telegram.ext import (
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    ConversationHandler
)
from config import ADMIN_IDS
from services.movie_service import load_movies, save_movies, update_session
from utils.keyboard_builder import build_keyboard

# –°–æ—Å—Ç–æ—è–Ω–∏—è ConversationHandler
ADMIN_MENU, ADD_MOVIE, DELETE_MOVIE, EDIT_SESSION = range(4)


def register_admin_handlers(app):
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('admin', admin_menu)],
        states={
            ADMIN_MENU: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_admin_menu)
            ],
            ADD_MOVIE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_movie_handler)
            ],
            DELETE_MOVIE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, delete_movie_handler)
            ],
            EDIT_SESSION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, edit_session_handler)
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel_admin)],
        allow_reentry=True
    )
    app.add_handler(conv_handler)


async def admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text('‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
        return ConversationHandler.END

    context.user_data.clear()
    return await show_admin_menu(update)


async def show_admin_menu(update: Update):
    await update.message.reply_text(
        'üõ†Ô∏è <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        parse_mode='HTML',
        reply_markup=build_keyboard([
            'üé¨ –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º',
            '‚ùå –£–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å–º',
            '‚è±Ô∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–µ–∞–Ω—Å',
            'üö™ –í—ã—Ö–æ–¥'
        ])
    )
    return ADMIN_MENU


async def handle_admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text

    if choice == 'üé¨ –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º':
        await update.message.reply_text(
            'üìù –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n'
            '<code>–ù–∞–∑–≤–∞–Ω–∏–µ; –î–∞—Ç–∞1 –í—Ä–µ–º—è1, –î–∞—Ç–∞2 –í—Ä–µ–º—è2,...</code>\n\n'
            '–ü—Ä–∏–º–µ—Ä:\n<code>–ò–Ω—Ç–µ—Ä—Å—Ç–µ–ª–ª–∞—Ä; 2023-12-15 19:00, 2023-12-16 21:00</code>',
            parse_mode='HTML'
        )
        return ADD_MOVIE

    elif choice == '‚ùå –£–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å–º':
        movies = load_movies()
        if not movies:
            await update.message.reply_text('‚ÑπÔ∏è –ù–µ—Ç —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è')
            return await show_admin_menu(update)

        await update.message.reply_text(
            '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:',
            reply_markup=build_keyboard([m['title'] for m in movies] + ['‚Ü©Ô∏è –ù–∞–∑–∞–¥'])
        )
        return DELETE_MOVIE

    elif choice == '‚è±Ô∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–µ–∞–Ω—Å':
        movies = load_movies()
        if not movies:
            await update.message.reply_text('‚ÑπÔ∏è –ù–µ—Ç —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
            return await show_admin_menu(update)

        await update.message.reply_text(
            '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å–º –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:',
            reply_markup=build_keyboard([m['title'] for m in movies] + ['‚Ü©Ô∏è –ù–∞–∑–∞–¥'])
        )
        context.user_data['edit_step'] = 'select_movie'
        return EDIT_SESSION

    elif choice == 'üö™ –í—ã—Ö–æ–¥':
        return await cancel_admin(update, context)

    await update.message.reply_text('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
    return ADMIN_MENU


async def add_movie_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        text = update.message.text.strip()
        if text.lower() == '–æ—Ç–º–µ–Ω–∞':
            return await show_admin_menu(update)

        title_part, sessions_part = text.split(';', 1)
        title = title_part.strip()
        sessions = []

        for session in sessions_part.split(','):
            date, time = session.strip().split()
            sessions.append({'date': date, 'time': time})

        movies = load_movies()
        if any(m['title'].lower() == title.lower() for m in movies):
            await update.message.reply_text('‚ö†Ô∏è –§–∏–ª—å–º —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
            return await show_admin_menu(update)

        movies.append({'title': title, 'sessions': sessions})
        save_movies(movies)

        await update.message.reply_text(
            f'‚úÖ –§–∏–ª—å–º <b>{title}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —Å {len(sessions)} —Å–µ–∞–Ω—Å–∞–º–∏',
            parse_mode='HTML'
        )
    except Exception as e:
        await update.message.reply_text(
            '‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n'
            '<code>–ù–∞–∑–≤–∞–Ω–∏–µ; –î–∞—Ç–∞ –í—Ä–µ–º—è, –î–∞—Ç–∞ –í—Ä–µ–º—è,...</code>\n'
            '–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "–æ—Ç–º–µ–Ω–∞"',
            parse_mode='HTML'
        )
        return ADD_MOVIE

    return await show_admin_menu(update)


async def delete_movie_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()

    if text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
        return await show_admin_menu(update)

    movies = load_movies()
    if not any(m['title'] == text for m in movies):
        await update.message.reply_text('‚ùå –§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω')
        return DELETE_MOVIE

    updated_movies = [m for m in movies if m['title'] != text]
    save_movies(updated_movies)

    await update.message.reply_text(f'‚úÖ –§–∏–ª—å–º <b>{text}</b> —É–¥–∞–ª–µ–Ω', parse_mode='HTML')
    return await show_admin_menu(update)


async def edit_session_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()

    if text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
        context.user_data.clear()
        return await show_admin_menu(update)

    if context.user_data.get('edit_step') == 'select_movie':
        movie_title = text
        movies = load_movies()
        movie = next((m for m in movies if m['title'] == movie_title), None)

        if not movie:
            await update.message.reply_text('‚ùå –§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω')
            return EDIT_SESSION

        if not movie['sessions']:
            await update.message.reply_text('‚ÑπÔ∏è –£ —ç—Ç–æ–≥–æ —Ñ–∏–ª—å–º–∞ –Ω–µ—Ç —Å–µ–∞–Ω—Å–æ–≤')
            return await show_admin_menu(update)

        sessions_text = '\n'.join(
            f"{i}. {s['date']} {s['time']}"
            for i, s in enumerate(movie['sessions'])
        )

        await update.message.reply_text(
            f'–°–µ–∞–Ω—Å—ã —Ñ–∏–ª—å–º–∞ <b>{movie_title}</b>:\n{sessions_text}\n\n'
            '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–µ–∞–Ω—Å–∞, –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n'
            '<code>–Ω–æ–º–µ—Ä, –¥–∞—Ç–∞, –≤—Ä–µ–º—è</code>\n\n'
            '–ü—Ä–∏–º–µ—Ä: <code>0, 2023-12-20, 18:00</code>',
            parse_mode='HTML'
        )
        context.user_data['edit_movie'] = movie_title
        context.user_data['edit_step'] = 'edit_session'
        return EDIT_SESSION

    elif context.user_data.get('edit_step') == 'edit_session':
        try:
            index, new_date, new_time = [x.strip() for x in text.split(',')]
            movie_title = context.user_data['edit_movie']

            if update_session(movie_title, int(index), new_date, new_time):
                await update.message.reply_text('‚úÖ –°–µ–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω')
            else:
                await update.message.reply_text('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–µ–∞–Ω—Å')

        except Exception as e:
            await update.message.reply_text(
                '‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n'
                '<code>–Ω–æ–º–µ—Ä, –¥–∞—Ç–∞, –≤—Ä–µ–º—è</code>\n'
                '–ü—Ä–∏–º–µ—Ä: <code>0, 2023-12-20, 18:00</code>',
                parse_mode='HTML'
            )
            return EDIT_SESSION

        finally:
            context.user_data.clear()

        return await show_admin_menu(update)


async def cancel_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text(
        'üîô –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏\n'
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        reply_markup=build_keyboard(['/start'])
    )
    return ConversationHandler.END